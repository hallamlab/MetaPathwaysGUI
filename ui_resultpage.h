/********************************************************************************
** Form generated from reading UI file 'resultpage.ui'
**
** Created by: Qt User Interface Compiler version 4.8.5
**
** WARNING! All changes made in this file will be lost when recompiling UI file!
********************************************************************************/

#ifndef UI_RESULTPAGE_H
#define UI_RESULTPAGE_H

#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtGui/QApplication>
#include <QtGui/QButtonGroup>
#include <QtGui/QGridLayout>
#include <QtGui/QGroupBox>
#include <QtGui/QHeaderView>
#include <QtGui/QLabel>
#include <QtGui/QRadioButton>
#include <QtGui/QTableWidget>
#include <QtGui/QWidget>

QT_BEGIN_NAMESPACE

class Ui_ResultPage
{
public:
    QLabel *title;
    QGroupBox *metapaths_stepsGFF_TO_AMINO;
    QRadioButton *gff_to_aminoYES;
    QRadioButton *gff_to_aminoSKIP;
    QRadioButton *gff_to_aminoREDO;
    QGroupBox *metapaths_stepsMLTREEMAP_CALCULATION;
    QRadioButton *mltreemap_calculationYES;
    QRadioButton *mltreemap_calculationSKIP;
    QRadioButton *mltreemap_calculationREDO;
    QTableWidget *tableWidget;
    QGridLayout *gridLayout_2;
    QGroupBox *metapaths_stepsPATHOLOGIC;
    QRadioButton *pathologicYES;
    QRadioButton *pathologicSKIP;
    QRadioButton *pathologicREDO;
    QGroupBox *metapaths_stepsSCAN_RRNA;
    QRadioButton *scan_rrnaYES;
    QRadioButton *scan_rrnaSKIP;
    QRadioButton *scan_rrnaREDO;
    QGroupBox *metapaths_stepsCREATE_REPORT_FILES;
    QRadioButton *create_report_filesYES;
    QRadioButton *create_report_filesSKIP;
    QRadioButton *create_report_filesREDO;
    QGroupBox *metapaths_stepsGENBANK_FILE;
    QRadioButton *genbank_fileYES;
    QRadioButton *genbank_fileSKIP;
    QRadioButton *genbank_fileREDO;
    QGroupBox *metapaths_stepsSCAN_TRNA;
    QRadioButton *scan_trnaYES;
    QRadioButton *scan_trnaSKIP;
    QRadioButton *scan_trnaREDO;
    QGroupBox *metapaths_stepsCOMPUTE_REFSCORE;
    QRadioButton *compute_refscoreYES;
    QRadioButton *compute_refscoreSKIP;
    QRadioButton *compute_refscoreREDO;
    QGroupBox *metapaths_stepsFILTERED_FASTA;
    QRadioButton *filtered_fastaYES;
    QRadioButton *filtered_fastaSKIP;
    QRadioButton *filtered_fastaREDO;
    QGroupBox *metapaths_stepsSTATS_RRNA;
    QRadioButton *stats_rrnaYES;
    QRadioButton *stats_rrnaSKIP;
    QRadioButton *stats_rrnaREDO;
    QGroupBox *metapaths_stepsPARSE_BLAST;
    QRadioButton *parse_blastYES;
    QRadioButton *parse_blastSKIP;
    QRadioButton *parse_blastREDO;
    QGroupBox *metapaths_stepsPATHOLOGIC_INPUT;
    QRadioButton *pathologic_inputYES;
    QRadioButton *pathologic_inputSKIP;
    QRadioButton *pathologic_inputREDO;
    QGroupBox *metapaths_stepsBLAST_REFDB;
    QRadioButton *blast_refdbYES;
    QRadioButton *blast_refdbSKIP;
    QRadioButton *blast_refdbREDO;
    QGroupBox *metapaths_stepsANNOTATE;
    QRadioButton *annotateYES;
    QRadioButton *annotateSKIP;
    QRadioButton *annotateREDO;
    QGroupBox *metapaths_stepsPREPROCESS_FASTA;
    QRadioButton *preprocess_fastaYES;
    QRadioButton *preprocess_fastaSKIP;
    QRadioButton *preprocess_fastaREDO;
    QGroupBox *metapaths_stepsORF_PREDICTION;
    QRadioButton *orf_predictionYES;
    QRadioButton *orf_predictionSKIP;
    QRadioButton *orf_predictionREDO;
    QGroupBox *metapaths_stepsMLTREEMAP_IMAGEMAKER;
    QRadioButton *mltreemap_imagemakerYES;
    QRadioButton *mltreemap_imagemakerSKIP;
    QRadioButton *mltreemap_imagemakerREDO;

    void setupUi(QWidget *ResultPage)
    {
        if (ResultPage->objectName().isEmpty())
            ResultPage->setObjectName(QString::fromUtf8("ResultPage"));
        ResultPage->resize(522, 627);
        QSizePolicy sizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
        sizePolicy.setHorizontalStretch(0);
        sizePolicy.setVerticalStretch(0);
        sizePolicy.setHeightForWidth(ResultPage->sizePolicy().hasHeightForWidth());
        ResultPage->setSizePolicy(sizePolicy);
        ResultPage->setMinimumSize(QSize(0, 0));
        title = new QLabel(ResultPage);
        title->setObjectName(QString::fromUtf8("title"));
        title->setGeometry(QRect(100, 0, 400, 41));
        title->setMaximumSize(QSize(400, 41));
        QFont font;
        font.setPointSize(24);
        title->setFont(font);
        metapaths_stepsGFF_TO_AMINO = new QGroupBox(ResultPage);
        metapaths_stepsGFF_TO_AMINO->setObjectName(QString::fromUtf8("metapaths_stepsGFF_TO_AMINO"));
        metapaths_stepsGFF_TO_AMINO->setGeometry(QRect(170, 130, 314, 41));
        QSizePolicy sizePolicy1(QSizePolicy::Minimum, QSizePolicy::Minimum);
        sizePolicy1.setHorizontalStretch(0);
        sizePolicy1.setVerticalStretch(0);
        sizePolicy1.setHeightForWidth(metapaths_stepsGFF_TO_AMINO->sizePolicy().hasHeightForWidth());
        metapaths_stepsGFF_TO_AMINO->setSizePolicy(sizePolicy1);
        metapaths_stepsGFF_TO_AMINO->setMinimumSize(QSize(51, 41));
        metapaths_stepsGFF_TO_AMINO->setFlat(true);
        gff_to_aminoYES = new QRadioButton(metapaths_stepsGFF_TO_AMINO);
        gff_to_aminoYES->setObjectName(QString::fromUtf8("gff_to_aminoYES"));
        gff_to_aminoYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(gff_to_aminoYES->sizePolicy().hasHeightForWidth());
        gff_to_aminoYES->setSizePolicy(sizePolicy1);
        gff_to_aminoYES->setMinimumSize(QSize(51, 41));
        gff_to_aminoSKIP = new QRadioButton(metapaths_stepsGFF_TO_AMINO);
        gff_to_aminoSKIP->setObjectName(QString::fromUtf8("gff_to_aminoSKIP"));
        gff_to_aminoSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(gff_to_aminoSKIP->sizePolicy().hasHeightForWidth());
        gff_to_aminoSKIP->setSizePolicy(sizePolicy1);
        gff_to_aminoSKIP->setMinimumSize(QSize(51, 41));
        gff_to_aminoREDO = new QRadioButton(metapaths_stepsGFF_TO_AMINO);
        gff_to_aminoREDO->setObjectName(QString::fromUtf8("gff_to_aminoREDO"));
        gff_to_aminoREDO->setGeometry(QRect(250, 0, 61, 41));
        sizePolicy1.setHeightForWidth(gff_to_aminoREDO->sizePolicy().hasHeightForWidth());
        gff_to_aminoREDO->setSizePolicy(sizePolicy1);
        gff_to_aminoREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsMLTREEMAP_CALCULATION = new QGroupBox(ResultPage);
        metapaths_stepsMLTREEMAP_CALCULATION->setObjectName(QString::fromUtf8("metapaths_stepsMLTREEMAP_CALCULATION"));
        metapaths_stepsMLTREEMAP_CALCULATION->setGeometry(QRect(170, 490, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsMLTREEMAP_CALCULATION->sizePolicy().hasHeightForWidth());
        metapaths_stepsMLTREEMAP_CALCULATION->setSizePolicy(sizePolicy1);
        metapaths_stepsMLTREEMAP_CALCULATION->setMinimumSize(QSize(51, 41));
        metapaths_stepsMLTREEMAP_CALCULATION->setFlat(true);
        mltreemap_calculationYES = new QRadioButton(metapaths_stepsMLTREEMAP_CALCULATION);
        mltreemap_calculationYES->setObjectName(QString::fromUtf8("mltreemap_calculationYES"));
        mltreemap_calculationYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(mltreemap_calculationYES->sizePolicy().hasHeightForWidth());
        mltreemap_calculationYES->setSizePolicy(sizePolicy1);
        mltreemap_calculationYES->setMinimumSize(QSize(51, 41));
        mltreemap_calculationSKIP = new QRadioButton(metapaths_stepsMLTREEMAP_CALCULATION);
        mltreemap_calculationSKIP->setObjectName(QString::fromUtf8("mltreemap_calculationSKIP"));
        mltreemap_calculationSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(mltreemap_calculationSKIP->sizePolicy().hasHeightForWidth());
        mltreemap_calculationSKIP->setSizePolicy(sizePolicy1);
        mltreemap_calculationSKIP->setMinimumSize(QSize(51, 41));
        mltreemap_calculationREDO = new QRadioButton(metapaths_stepsMLTREEMAP_CALCULATION);
        mltreemap_calculationREDO->setObjectName(QString::fromUtf8("mltreemap_calculationREDO"));
        mltreemap_calculationREDO->setGeometry(QRect(250, 0, 51, 41));
        sizePolicy1.setHeightForWidth(mltreemap_calculationREDO->sizePolicy().hasHeightForWidth());
        mltreemap_calculationREDO->setSizePolicy(sizePolicy1);
        mltreemap_calculationREDO->setMinimumSize(QSize(51, 41));
        tableWidget = new QTableWidget(ResultPage);
        if (tableWidget->columnCount() < 4)
            tableWidget->setColumnCount(4);
        QTableWidgetItem *__qtablewidgetitem = new QTableWidgetItem();
        tableWidget->setHorizontalHeaderItem(0, __qtablewidgetitem);
        QTableWidgetItem *__qtablewidgetitem1 = new QTableWidgetItem();
        tableWidget->setHorizontalHeaderItem(1, __qtablewidgetitem1);
        QTableWidgetItem *__qtablewidgetitem2 = new QTableWidgetItem();
        tableWidget->setHorizontalHeaderItem(2, __qtablewidgetitem2);
        QTableWidgetItem *__qtablewidgetitem3 = new QTableWidgetItem();
        tableWidget->setHorizontalHeaderItem(3, __qtablewidgetitem3);
        if (tableWidget->rowCount() < 17)
            tableWidget->setRowCount(17);
        QTableWidgetItem *__qtablewidgetitem4 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(0, __qtablewidgetitem4);
        QTableWidgetItem *__qtablewidgetitem5 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(1, __qtablewidgetitem5);
        QTableWidgetItem *__qtablewidgetitem6 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(2, __qtablewidgetitem6);
        QTableWidgetItem *__qtablewidgetitem7 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(3, __qtablewidgetitem7);
        QTableWidgetItem *__qtablewidgetitem8 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(4, __qtablewidgetitem8);
        QTableWidgetItem *__qtablewidgetitem9 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(5, __qtablewidgetitem9);
        QTableWidgetItem *__qtablewidgetitem10 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(6, __qtablewidgetitem10);
        QTableWidgetItem *__qtablewidgetitem11 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(7, __qtablewidgetitem11);
        QTableWidgetItem *__qtablewidgetitem12 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(8, __qtablewidgetitem12);
        QTableWidgetItem *__qtablewidgetitem13 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(9, __qtablewidgetitem13);
        QTableWidgetItem *__qtablewidgetitem14 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(10, __qtablewidgetitem14);
        QTableWidgetItem *__qtablewidgetitem15 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(11, __qtablewidgetitem15);
        QTableWidgetItem *__qtablewidgetitem16 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(12, __qtablewidgetitem16);
        QTableWidgetItem *__qtablewidgetitem17 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(13, __qtablewidgetitem17);
        QTableWidgetItem *__qtablewidgetitem18 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(14, __qtablewidgetitem18);
        QTableWidgetItem *__qtablewidgetitem19 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(15, __qtablewidgetitem19);
        QTableWidgetItem *__qtablewidgetitem20 = new QTableWidgetItem();
        tableWidget->setVerticalHeaderItem(16, __qtablewidgetitem20);
        tableWidget->setObjectName(QString::fromUtf8("tableWidget"));
        tableWidget->setGeometry(QRect(10, 50, 495, 562));
        QSizePolicy sizePolicy2(QSizePolicy::Maximum, QSizePolicy::Maximum);
        sizePolicy2.setHorizontalStretch(0);
        sizePolicy2.setVerticalStretch(0);
        sizePolicy2.setHeightForWidth(tableWidget->sizePolicy().hasHeightForWidth());
        tableWidget->setSizePolicy(sizePolicy2);
        tableWidget->setSizeIncrement(QSize(0, 0));
        tableWidget->setFocusPolicy(Qt::WheelFocus);
        tableWidget->setLayoutDirection(Qt::LeftToRight);
        tableWidget->setFrameShape(QFrame::StyledPanel);
        tableWidget->setFrameShadow(QFrame::Sunken);
        tableWidget->setLineWidth(1);
        tableWidget->setMidLineWidth(1);
        tableWidget->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
        tableWidget->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
        tableWidget->setShowGrid(true);
        tableWidget->setGridStyle(Qt::DashLine);
        tableWidget->setSortingEnabled(false);
        tableWidget->setCornerButtonEnabled(true);
        gridLayout_2 = new QGridLayout(tableWidget);
        gridLayout_2->setObjectName(QString::fromUtf8("gridLayout_2"));
        tableWidget->horizontalHeader()->setVisible(false);
        tableWidget->horizontalHeader()->setCascadingSectionResizes(false);
        tableWidget->horizontalHeader()->setDefaultSectionSize(105);
        tableWidget->verticalHeader()->setMinimumSectionSize(25);
        metapaths_stepsPATHOLOGIC = new QGroupBox(ResultPage);
        metapaths_stepsPATHOLOGIC->setObjectName(QString::fromUtf8("metapaths_stepsPATHOLOGIC"));
        metapaths_stepsPATHOLOGIC->setGeometry(QRect(170, 550, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsPATHOLOGIC->sizePolicy().hasHeightForWidth());
        metapaths_stepsPATHOLOGIC->setSizePolicy(sizePolicy1);
        metapaths_stepsPATHOLOGIC->setMinimumSize(QSize(51, 41));
        metapaths_stepsPATHOLOGIC->setFlat(true);
        pathologicYES = new QRadioButton(metapaths_stepsPATHOLOGIC);
        pathologicYES->setObjectName(QString::fromUtf8("pathologicYES"));
        pathologicYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(pathologicYES->sizePolicy().hasHeightForWidth());
        pathologicYES->setSizePolicy(sizePolicy1);
        pathologicYES->setMinimumSize(QSize(51, 41));
        pathologicSKIP = new QRadioButton(metapaths_stepsPATHOLOGIC);
        pathologicSKIP->setObjectName(QString::fromUtf8("pathologicSKIP"));
        pathologicSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(pathologicSKIP->sizePolicy().hasHeightForWidth());
        pathologicSKIP->setSizePolicy(sizePolicy1);
        pathologicSKIP->setMinimumSize(QSize(51, 41));
        pathologicREDO = new QRadioButton(metapaths_stepsPATHOLOGIC);
        pathologicREDO->setObjectName(QString::fromUtf8("pathologicREDO"));
        pathologicREDO->setGeometry(QRect(250, 0, 61, 41));
        sizePolicy1.setHeightForWidth(pathologicREDO->sizePolicy().hasHeightForWidth());
        pathologicREDO->setSizePolicy(sizePolicy1);
        pathologicREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsSCAN_RRNA = new QGroupBox(ResultPage);
        metapaths_stepsSCAN_RRNA->setObjectName(QString::fromUtf8("metapaths_stepsSCAN_RRNA"));
        metapaths_stepsSCAN_RRNA->setGeometry(QRect(170, 280, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsSCAN_RRNA->sizePolicy().hasHeightForWidth());
        metapaths_stepsSCAN_RRNA->setSizePolicy(sizePolicy1);
        metapaths_stepsSCAN_RRNA->setMinimumSize(QSize(51, 41));
        metapaths_stepsSCAN_RRNA->setFlat(true);
        scan_rrnaYES = new QRadioButton(metapaths_stepsSCAN_RRNA);
        scan_rrnaYES->setObjectName(QString::fromUtf8("scan_rrnaYES"));
        scan_rrnaYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(scan_rrnaYES->sizePolicy().hasHeightForWidth());
        scan_rrnaYES->setSizePolicy(sizePolicy1);
        scan_rrnaYES->setMinimumSize(QSize(51, 41));
        scan_rrnaSKIP = new QRadioButton(metapaths_stepsSCAN_RRNA);
        scan_rrnaSKIP->setObjectName(QString::fromUtf8("scan_rrnaSKIP"));
        scan_rrnaSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(scan_rrnaSKIP->sizePolicy().hasHeightForWidth());
        scan_rrnaSKIP->setSizePolicy(sizePolicy1);
        scan_rrnaSKIP->setMinimumSize(QSize(51, 41));
        scan_rrnaREDO = new QRadioButton(metapaths_stepsSCAN_RRNA);
        scan_rrnaREDO->setObjectName(QString::fromUtf8("scan_rrnaREDO"));
        scan_rrnaREDO->setGeometry(QRect(250, 0, 61, 41));
        sizePolicy1.setHeightForWidth(scan_rrnaREDO->sizePolicy().hasHeightForWidth());
        scan_rrnaREDO->setSizePolicy(sizePolicy1);
        scan_rrnaREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsCREATE_REPORT_FILES = new QGroupBox(ResultPage);
        metapaths_stepsCREATE_REPORT_FILES->setObjectName(QString::fromUtf8("metapaths_stepsCREATE_REPORT_FILES"));
        metapaths_stepsCREATE_REPORT_FILES->setGeometry(QRect(170, 460, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsCREATE_REPORT_FILES->sizePolicy().hasHeightForWidth());
        metapaths_stepsCREATE_REPORT_FILES->setSizePolicy(sizePolicy1);
        metapaths_stepsCREATE_REPORT_FILES->setMinimumSize(QSize(51, 41));
        metapaths_stepsCREATE_REPORT_FILES->setFlat(true);
        create_report_filesYES = new QRadioButton(metapaths_stepsCREATE_REPORT_FILES);
        create_report_filesYES->setObjectName(QString::fromUtf8("create_report_filesYES"));
        create_report_filesYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(create_report_filesYES->sizePolicy().hasHeightForWidth());
        create_report_filesYES->setSizePolicy(sizePolicy1);
        create_report_filesYES->setMinimumSize(QSize(51, 41));
        create_report_filesSKIP = new QRadioButton(metapaths_stepsCREATE_REPORT_FILES);
        create_report_filesSKIP->setObjectName(QString::fromUtf8("create_report_filesSKIP"));
        create_report_filesSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(create_report_filesSKIP->sizePolicy().hasHeightForWidth());
        create_report_filesSKIP->setSizePolicy(sizePolicy1);
        create_report_filesSKIP->setMinimumSize(QSize(51, 41));
        create_report_filesREDO = new QRadioButton(metapaths_stepsCREATE_REPORT_FILES);
        create_report_filesREDO->setObjectName(QString::fromUtf8("create_report_filesREDO"));
        create_report_filesREDO->setGeometry(QRect(250, 0, 51, 41));
        sizePolicy1.setHeightForWidth(create_report_filesREDO->sizePolicy().hasHeightForWidth());
        create_report_filesREDO->setSizePolicy(sizePolicy1);
        create_report_filesREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsGENBANK_FILE = new QGroupBox(ResultPage);
        metapaths_stepsGENBANK_FILE->setObjectName(QString::fromUtf8("metapaths_stepsGENBANK_FILE"));
        metapaths_stepsGENBANK_FILE->setGeometry(QRect(170, 430, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsGENBANK_FILE->sizePolicy().hasHeightForWidth());
        metapaths_stepsGENBANK_FILE->setSizePolicy(sizePolicy1);
        metapaths_stepsGENBANK_FILE->setMinimumSize(QSize(51, 41));
        metapaths_stepsGENBANK_FILE->setFlat(true);
        genbank_fileYES = new QRadioButton(metapaths_stepsGENBANK_FILE);
        genbank_fileYES->setObjectName(QString::fromUtf8("genbank_fileYES"));
        genbank_fileYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(genbank_fileYES->sizePolicy().hasHeightForWidth());
        genbank_fileYES->setSizePolicy(sizePolicy1);
        genbank_fileYES->setMinimumSize(QSize(51, 41));
        genbank_fileSKIP = new QRadioButton(metapaths_stepsGENBANK_FILE);
        genbank_fileSKIP->setObjectName(QString::fromUtf8("genbank_fileSKIP"));
        genbank_fileSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(genbank_fileSKIP->sizePolicy().hasHeightForWidth());
        genbank_fileSKIP->setSizePolicy(sizePolicy1);
        genbank_fileSKIP->setMinimumSize(QSize(51, 41));
        genbank_fileREDO = new QRadioButton(metapaths_stepsGENBANK_FILE);
        genbank_fileREDO->setObjectName(QString::fromUtf8("genbank_fileREDO"));
        genbank_fileREDO->setGeometry(QRect(250, 0, 51, 41));
        sizePolicy1.setHeightForWidth(genbank_fileREDO->sizePolicy().hasHeightForWidth());
        genbank_fileREDO->setSizePolicy(sizePolicy1);
        genbank_fileREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsSCAN_TRNA = new QGroupBox(ResultPage);
        metapaths_stepsSCAN_TRNA->setObjectName(QString::fromUtf8("metapaths_stepsSCAN_TRNA"));
        metapaths_stepsSCAN_TRNA->setGeometry(QRect(170, 310, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsSCAN_TRNA->sizePolicy().hasHeightForWidth());
        metapaths_stepsSCAN_TRNA->setSizePolicy(sizePolicy1);
        metapaths_stepsSCAN_TRNA->setMinimumSize(QSize(51, 41));
        metapaths_stepsSCAN_TRNA->setFlat(true);
        scan_trnaYES = new QRadioButton(metapaths_stepsSCAN_TRNA);
        scan_trnaYES->setObjectName(QString::fromUtf8("scan_trnaYES"));
        scan_trnaYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(scan_trnaYES->sizePolicy().hasHeightForWidth());
        scan_trnaYES->setSizePolicy(sizePolicy1);
        scan_trnaYES->setMinimumSize(QSize(51, 41));
        scan_trnaSKIP = new QRadioButton(metapaths_stepsSCAN_TRNA);
        scan_trnaSKIP->setObjectName(QString::fromUtf8("scan_trnaSKIP"));
        scan_trnaSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(scan_trnaSKIP->sizePolicy().hasHeightForWidth());
        scan_trnaSKIP->setSizePolicy(sizePolicy1);
        scan_trnaSKIP->setMinimumSize(QSize(51, 41));
        scan_trnaREDO = new QRadioButton(metapaths_stepsSCAN_TRNA);
        scan_trnaREDO->setObjectName(QString::fromUtf8("scan_trnaREDO"));
        scan_trnaREDO->setGeometry(QRect(250, 0, 61, 41));
        sizePolicy1.setHeightForWidth(scan_trnaREDO->sizePolicy().hasHeightForWidth());
        scan_trnaREDO->setSizePolicy(sizePolicy1);
        scan_trnaREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsCOMPUTE_REFSCORE = new QGroupBox(ResultPage);
        metapaths_stepsCOMPUTE_REFSCORE->setObjectName(QString::fromUtf8("metapaths_stepsCOMPUTE_REFSCORE"));
        metapaths_stepsCOMPUTE_REFSCORE->setGeometry(QRect(170, 190, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsCOMPUTE_REFSCORE->sizePolicy().hasHeightForWidth());
        metapaths_stepsCOMPUTE_REFSCORE->setSizePolicy(sizePolicy1);
        metapaths_stepsCOMPUTE_REFSCORE->setMinimumSize(QSize(51, 41));
        metapaths_stepsCOMPUTE_REFSCORE->setFlat(true);
        compute_refscoreYES = new QRadioButton(metapaths_stepsCOMPUTE_REFSCORE);
        compute_refscoreYES->setObjectName(QString::fromUtf8("compute_refscoreYES"));
        compute_refscoreYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(compute_refscoreYES->sizePolicy().hasHeightForWidth());
        compute_refscoreYES->setSizePolicy(sizePolicy1);
        compute_refscoreYES->setMinimumSize(QSize(51, 41));
        compute_refscoreSKIP = new QRadioButton(metapaths_stepsCOMPUTE_REFSCORE);
        compute_refscoreSKIP->setObjectName(QString::fromUtf8("compute_refscoreSKIP"));
        compute_refscoreSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(compute_refscoreSKIP->sizePolicy().hasHeightForWidth());
        compute_refscoreSKIP->setSizePolicy(sizePolicy1);
        compute_refscoreSKIP->setMinimumSize(QSize(51, 41));
        compute_refscoreREDO = new QRadioButton(metapaths_stepsCOMPUTE_REFSCORE);
        compute_refscoreREDO->setObjectName(QString::fromUtf8("compute_refscoreREDO"));
        compute_refscoreREDO->setGeometry(QRect(250, 0, 61, 41));
        sizePolicy1.setHeightForWidth(compute_refscoreREDO->sizePolicy().hasHeightForWidth());
        compute_refscoreREDO->setSizePolicy(sizePolicy1);
        compute_refscoreREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsFILTERED_FASTA = new QGroupBox(ResultPage);
        metapaths_stepsFILTERED_FASTA->setObjectName(QString::fromUtf8("metapaths_stepsFILTERED_FASTA"));
        metapaths_stepsFILTERED_FASTA->setGeometry(QRect(170, 160, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsFILTERED_FASTA->sizePolicy().hasHeightForWidth());
        metapaths_stepsFILTERED_FASTA->setSizePolicy(sizePolicy1);
        metapaths_stepsFILTERED_FASTA->setMinimumSize(QSize(51, 41));
        metapaths_stepsFILTERED_FASTA->setFlat(true);
        filtered_fastaYES = new QRadioButton(metapaths_stepsFILTERED_FASTA);
        filtered_fastaYES->setObjectName(QString::fromUtf8("filtered_fastaYES"));
        filtered_fastaYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(filtered_fastaYES->sizePolicy().hasHeightForWidth());
        filtered_fastaYES->setSizePolicy(sizePolicy1);
        filtered_fastaYES->setMinimumSize(QSize(51, 41));
        filtered_fastaSKIP = new QRadioButton(metapaths_stepsFILTERED_FASTA);
        filtered_fastaSKIP->setObjectName(QString::fromUtf8("filtered_fastaSKIP"));
        filtered_fastaSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(filtered_fastaSKIP->sizePolicy().hasHeightForWidth());
        filtered_fastaSKIP->setSizePolicy(sizePolicy1);
        filtered_fastaSKIP->setMinimumSize(QSize(51, 41));
        filtered_fastaREDO = new QRadioButton(metapaths_stepsFILTERED_FASTA);
        filtered_fastaREDO->setObjectName(QString::fromUtf8("filtered_fastaREDO"));
        filtered_fastaREDO->setGeometry(QRect(250, 0, 61, 41));
        sizePolicy1.setHeightForWidth(filtered_fastaREDO->sizePolicy().hasHeightForWidth());
        filtered_fastaREDO->setSizePolicy(sizePolicy1);
        filtered_fastaREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsSTATS_RRNA = new QGroupBox(ResultPage);
        metapaths_stepsSTATS_RRNA->setObjectName(QString::fromUtf8("metapaths_stepsSTATS_RRNA"));
        metapaths_stepsSTATS_RRNA->setGeometry(QRect(170, 340, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsSTATS_RRNA->sizePolicy().hasHeightForWidth());
        metapaths_stepsSTATS_RRNA->setSizePolicy(sizePolicy1);
        metapaths_stepsSTATS_RRNA->setMinimumSize(QSize(51, 41));
        metapaths_stepsSTATS_RRNA->setFlat(true);
        stats_rrnaYES = new QRadioButton(metapaths_stepsSTATS_RRNA);
        stats_rrnaYES->setObjectName(QString::fromUtf8("stats_rrnaYES"));
        stats_rrnaYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(stats_rrnaYES->sizePolicy().hasHeightForWidth());
        stats_rrnaYES->setSizePolicy(sizePolicy1);
        stats_rrnaYES->setMinimumSize(QSize(51, 41));
        stats_rrnaSKIP = new QRadioButton(metapaths_stepsSTATS_RRNA);
        stats_rrnaSKIP->setObjectName(QString::fromUtf8("stats_rrnaSKIP"));
        stats_rrnaSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(stats_rrnaSKIP->sizePolicy().hasHeightForWidth());
        stats_rrnaSKIP->setSizePolicy(sizePolicy1);
        stats_rrnaSKIP->setMinimumSize(QSize(51, 41));
        stats_rrnaREDO = new QRadioButton(metapaths_stepsSTATS_RRNA);
        stats_rrnaREDO->setObjectName(QString::fromUtf8("stats_rrnaREDO"));
        stats_rrnaREDO->setGeometry(QRect(250, 0, 51, 41));
        sizePolicy1.setHeightForWidth(stats_rrnaREDO->sizePolicy().hasHeightForWidth());
        stats_rrnaREDO->setSizePolicy(sizePolicy1);
        stats_rrnaREDO->setMinimumSize(QSize(51, 41));
        stats_rrnaREDO->setAutoRepeatDelay(100);
        metapaths_stepsPARSE_BLAST = new QGroupBox(ResultPage);
        metapaths_stepsPARSE_BLAST->setObjectName(QString::fromUtf8("metapaths_stepsPARSE_BLAST"));
        metapaths_stepsPARSE_BLAST->setGeometry(QRect(170, 250, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsPARSE_BLAST->sizePolicy().hasHeightForWidth());
        metapaths_stepsPARSE_BLAST->setSizePolicy(sizePolicy1);
        metapaths_stepsPARSE_BLAST->setMinimumSize(QSize(51, 41));
        metapaths_stepsPARSE_BLAST->setFlat(true);
        parse_blastYES = new QRadioButton(metapaths_stepsPARSE_BLAST);
        parse_blastYES->setObjectName(QString::fromUtf8("parse_blastYES"));
        parse_blastYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(parse_blastYES->sizePolicy().hasHeightForWidth());
        parse_blastYES->setSizePolicy(sizePolicy1);
        parse_blastYES->setMinimumSize(QSize(51, 41));
        parse_blastSKIP = new QRadioButton(metapaths_stepsPARSE_BLAST);
        parse_blastSKIP->setObjectName(QString::fromUtf8("parse_blastSKIP"));
        parse_blastSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(parse_blastSKIP->sizePolicy().hasHeightForWidth());
        parse_blastSKIP->setSizePolicy(sizePolicy1);
        parse_blastSKIP->setMinimumSize(QSize(51, 41));
        parse_blastREDO = new QRadioButton(metapaths_stepsPARSE_BLAST);
        parse_blastREDO->setObjectName(QString::fromUtf8("parse_blastREDO"));
        parse_blastREDO->setGeometry(QRect(250, 0, 61, 41));
        sizePolicy1.setHeightForWidth(parse_blastREDO->sizePolicy().hasHeightForWidth());
        parse_blastREDO->setSizePolicy(sizePolicy1);
        parse_blastREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsPATHOLOGIC_INPUT = new QGroupBox(ResultPage);
        metapaths_stepsPATHOLOGIC_INPUT->setObjectName(QString::fromUtf8("metapaths_stepsPATHOLOGIC_INPUT"));
        metapaths_stepsPATHOLOGIC_INPUT->setGeometry(QRect(170, 400, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsPATHOLOGIC_INPUT->sizePolicy().hasHeightForWidth());
        metapaths_stepsPATHOLOGIC_INPUT->setSizePolicy(sizePolicy1);
        metapaths_stepsPATHOLOGIC_INPUT->setMinimumSize(QSize(51, 41));
        metapaths_stepsPATHOLOGIC_INPUT->setFlat(true);
        pathologic_inputYES = new QRadioButton(metapaths_stepsPATHOLOGIC_INPUT);
        pathologic_inputYES->setObjectName(QString::fromUtf8("pathologic_inputYES"));
        pathologic_inputYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(pathologic_inputYES->sizePolicy().hasHeightForWidth());
        pathologic_inputYES->setSizePolicy(sizePolicy1);
        pathologic_inputYES->setMinimumSize(QSize(51, 41));
        pathologic_inputSKIP = new QRadioButton(metapaths_stepsPATHOLOGIC_INPUT);
        pathologic_inputSKIP->setObjectName(QString::fromUtf8("pathologic_inputSKIP"));
        pathologic_inputSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(pathologic_inputSKIP->sizePolicy().hasHeightForWidth());
        pathologic_inputSKIP->setSizePolicy(sizePolicy1);
        pathologic_inputSKIP->setMinimumSize(QSize(51, 41));
        pathologic_inputREDO = new QRadioButton(metapaths_stepsPATHOLOGIC_INPUT);
        pathologic_inputREDO->setObjectName(QString::fromUtf8("pathologic_inputREDO"));
        pathologic_inputREDO->setGeometry(QRect(250, 0, 51, 41));
        sizePolicy1.setHeightForWidth(pathologic_inputREDO->sizePolicy().hasHeightForWidth());
        pathologic_inputREDO->setSizePolicy(sizePolicy1);
        pathologic_inputREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsBLAST_REFDB = new QGroupBox(ResultPage);
        metapaths_stepsBLAST_REFDB->setObjectName(QString::fromUtf8("metapaths_stepsBLAST_REFDB"));
        metapaths_stepsBLAST_REFDB->setGeometry(QRect(170, 220, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsBLAST_REFDB->sizePolicy().hasHeightForWidth());
        metapaths_stepsBLAST_REFDB->setSizePolicy(sizePolicy1);
        metapaths_stepsBLAST_REFDB->setMinimumSize(QSize(51, 41));
        metapaths_stepsBLAST_REFDB->setFlat(true);
        blast_refdbYES = new QRadioButton(metapaths_stepsBLAST_REFDB);
        blast_refdbYES->setObjectName(QString::fromUtf8("blast_refdbYES"));
        blast_refdbYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(blast_refdbYES->sizePolicy().hasHeightForWidth());
        blast_refdbYES->setSizePolicy(sizePolicy1);
        blast_refdbYES->setMinimumSize(QSize(51, 41));
        blast_refdbSKIP = new QRadioButton(metapaths_stepsBLAST_REFDB);
        blast_refdbSKIP->setObjectName(QString::fromUtf8("blast_refdbSKIP"));
        blast_refdbSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(blast_refdbSKIP->sizePolicy().hasHeightForWidth());
        blast_refdbSKIP->setSizePolicy(sizePolicy1);
        blast_refdbSKIP->setMinimumSize(QSize(51, 41));
        blast_refdbREDO = new QRadioButton(metapaths_stepsBLAST_REFDB);
        blast_refdbREDO->setObjectName(QString::fromUtf8("blast_refdbREDO"));
        blast_refdbREDO->setGeometry(QRect(250, 0, 61, 41));
        sizePolicy1.setHeightForWidth(blast_refdbREDO->sizePolicy().hasHeightForWidth());
        blast_refdbREDO->setSizePolicy(sizePolicy1);
        blast_refdbREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsANNOTATE = new QGroupBox(ResultPage);
        metapaths_stepsANNOTATE->setObjectName(QString::fromUtf8("metapaths_stepsANNOTATE"));
        metapaths_stepsANNOTATE->setGeometry(QRect(170, 370, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsANNOTATE->sizePolicy().hasHeightForWidth());
        metapaths_stepsANNOTATE->setSizePolicy(sizePolicy1);
        metapaths_stepsANNOTATE->setMinimumSize(QSize(51, 41));
        metapaths_stepsANNOTATE->setFlat(true);
        annotateYES = new QRadioButton(metapaths_stepsANNOTATE);
        annotateYES->setObjectName(QString::fromUtf8("annotateYES"));
        annotateYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(annotateYES->sizePolicy().hasHeightForWidth());
        annotateYES->setSizePolicy(sizePolicy1);
        annotateYES->setMinimumSize(QSize(51, 41));
        annotateSKIP = new QRadioButton(metapaths_stepsANNOTATE);
        annotateSKIP->setObjectName(QString::fromUtf8("annotateSKIP"));
        annotateSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(annotateSKIP->sizePolicy().hasHeightForWidth());
        annotateSKIP->setSizePolicy(sizePolicy1);
        annotateSKIP->setMinimumSize(QSize(51, 41));
        annotateREDO = new QRadioButton(metapaths_stepsANNOTATE);
        annotateREDO->setObjectName(QString::fromUtf8("annotateREDO"));
        annotateREDO->setGeometry(QRect(250, 0, 51, 41));
        sizePolicy1.setHeightForWidth(annotateREDO->sizePolicy().hasHeightForWidth());
        annotateREDO->setSizePolicy(sizePolicy1);
        annotateREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsPREPROCESS_FASTA = new QGroupBox(ResultPage);
        metapaths_stepsPREPROCESS_FASTA->setObjectName(QString::fromUtf8("metapaths_stepsPREPROCESS_FASTA"));
        metapaths_stepsPREPROCESS_FASTA->setGeometry(QRect(170, 70, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsPREPROCESS_FASTA->sizePolicy().hasHeightForWidth());
        metapaths_stepsPREPROCESS_FASTA->setSizePolicy(sizePolicy1);
        metapaths_stepsPREPROCESS_FASTA->setMinimumSize(QSize(51, 41));
        metapaths_stepsPREPROCESS_FASTA->setFlat(true);
        preprocess_fastaYES = new QRadioButton(metapaths_stepsPREPROCESS_FASTA);
        preprocess_fastaYES->setObjectName(QString::fromUtf8("preprocess_fastaYES"));
        preprocess_fastaYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(preprocess_fastaYES->sizePolicy().hasHeightForWidth());
        preprocess_fastaYES->setSizePolicy(sizePolicy1);
        preprocess_fastaYES->setMinimumSize(QSize(51, 41));
        preprocess_fastaSKIP = new QRadioButton(metapaths_stepsPREPROCESS_FASTA);
        preprocess_fastaSKIP->setObjectName(QString::fromUtf8("preprocess_fastaSKIP"));
        preprocess_fastaSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(preprocess_fastaSKIP->sizePolicy().hasHeightForWidth());
        preprocess_fastaSKIP->setSizePolicy(sizePolicy1);
        preprocess_fastaSKIP->setMinimumSize(QSize(51, 41));
        preprocess_fastaREDO = new QRadioButton(metapaths_stepsPREPROCESS_FASTA);
        preprocess_fastaREDO->setObjectName(QString::fromUtf8("preprocess_fastaREDO"));
        preprocess_fastaREDO->setGeometry(QRect(250, 0, 51, 41));
        sizePolicy1.setHeightForWidth(preprocess_fastaREDO->sizePolicy().hasHeightForWidth());
        preprocess_fastaREDO->setSizePolicy(sizePolicy1);
        preprocess_fastaREDO->setMinimumSize(QSize(51, 41));
        metapaths_stepsORF_PREDICTION = new QGroupBox(ResultPage);
        metapaths_stepsORF_PREDICTION->setObjectName(QString::fromUtf8("metapaths_stepsORF_PREDICTION"));
        metapaths_stepsORF_PREDICTION->setGeometry(QRect(170, 100, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsORF_PREDICTION->sizePolicy().hasHeightForWidth());
        metapaths_stepsORF_PREDICTION->setSizePolicy(sizePolicy1);
        metapaths_stepsORF_PREDICTION->setMinimumSize(QSize(51, 41));
        metapaths_stepsORF_PREDICTION->setFlat(true);
        orf_predictionYES = new QRadioButton(metapaths_stepsORF_PREDICTION);
        orf_predictionYES->setObjectName(QString::fromUtf8("orf_predictionYES"));
        orf_predictionYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(orf_predictionYES->sizePolicy().hasHeightForWidth());
        orf_predictionYES->setSizePolicy(sizePolicy1);
        orf_predictionYES->setMinimumSize(QSize(51, 41));
        orf_predictionSKIP = new QRadioButton(metapaths_stepsORF_PREDICTION);
        orf_predictionSKIP->setObjectName(QString::fromUtf8("orf_predictionSKIP"));
        orf_predictionSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(orf_predictionSKIP->sizePolicy().hasHeightForWidth());
        orf_predictionSKIP->setSizePolicy(sizePolicy1);
        orf_predictionSKIP->setMinimumSize(QSize(51, 41));
        orf_predictionREDO = new QRadioButton(metapaths_stepsORF_PREDICTION);
        orf_predictionREDO->setObjectName(QString::fromUtf8("orf_predictionREDO"));
        orf_predictionREDO->setGeometry(QRect(250, 0, 51, 41));
        sizePolicy1.setHeightForWidth(orf_predictionREDO->sizePolicy().hasHeightForWidth());
        orf_predictionREDO->setSizePolicy(sizePolicy1);
        orf_predictionREDO->setMinimumSize(QSize(51, 41));
        orf_predictionREDO->setLayoutDirection(Qt::LeftToRight);
        metapaths_stepsMLTREEMAP_IMAGEMAKER = new QGroupBox(ResultPage);
        metapaths_stepsMLTREEMAP_IMAGEMAKER->setObjectName(QString::fromUtf8("metapaths_stepsMLTREEMAP_IMAGEMAKER"));
        metapaths_stepsMLTREEMAP_IMAGEMAKER->setGeometry(QRect(170, 520, 314, 41));
        sizePolicy1.setHeightForWidth(metapaths_stepsMLTREEMAP_IMAGEMAKER->sizePolicy().hasHeightForWidth());
        metapaths_stepsMLTREEMAP_IMAGEMAKER->setSizePolicy(sizePolicy1);
        metapaths_stepsMLTREEMAP_IMAGEMAKER->setMinimumSize(QSize(51, 41));
        metapaths_stepsMLTREEMAP_IMAGEMAKER->setFlat(true);
        mltreemap_imagemakerYES = new QRadioButton(metapaths_stepsMLTREEMAP_IMAGEMAKER);
        mltreemap_imagemakerYES->setObjectName(QString::fromUtf8("mltreemap_imagemakerYES"));
        mltreemap_imagemakerYES->setGeometry(QRect(50, 0, 51, 41));
        sizePolicy1.setHeightForWidth(mltreemap_imagemakerYES->sizePolicy().hasHeightForWidth());
        mltreemap_imagemakerYES->setSizePolicy(sizePolicy1);
        mltreemap_imagemakerYES->setMinimumSize(QSize(51, 41));
        mltreemap_imagemakerSKIP = new QRadioButton(metapaths_stepsMLTREEMAP_IMAGEMAKER);
        mltreemap_imagemakerSKIP->setObjectName(QString::fromUtf8("mltreemap_imagemakerSKIP"));
        mltreemap_imagemakerSKIP->setGeometry(QRect(150, 0, 51, 41));
        sizePolicy1.setHeightForWidth(mltreemap_imagemakerSKIP->sizePolicy().hasHeightForWidth());
        mltreemap_imagemakerSKIP->setSizePolicy(sizePolicy1);
        mltreemap_imagemakerSKIP->setMinimumSize(QSize(51, 41));
        mltreemap_imagemakerREDO = new QRadioButton(metapaths_stepsMLTREEMAP_IMAGEMAKER);
        mltreemap_imagemakerREDO->setObjectName(QString::fromUtf8("mltreemap_imagemakerREDO"));
        mltreemap_imagemakerREDO->setGeometry(QRect(250, 0, 51, 41));
        sizePolicy1.setHeightForWidth(mltreemap_imagemakerREDO->sizePolicy().hasHeightForWidth());
        mltreemap_imagemakerREDO->setSizePolicy(sizePolicy1);
        mltreemap_imagemakerREDO->setMinimumSize(QSize(51, 41));
        title->raise();
        tableWidget->raise();
        metapaths_stepsGENBANK_FILE->raise();
        metapaths_stepsORF_PREDICTION->raise();
        metapaths_stepsCOMPUTE_REFSCORE->raise();
        metapaths_stepsSCAN_RRNA->raise();
        metapaths_stepsPATHOLOGIC->raise();
        metapaths_stepsMLTREEMAP_CALCULATION->raise();
        metapaths_stepsPATHOLOGIC_INPUT->raise();
        metapaths_stepsFILTERED_FASTA->raise();
        metapaths_stepsPARSE_BLAST->raise();
        metapaths_stepsSCAN_TRNA->raise();
        metapaths_stepsBLAST_REFDB->raise();
        metapaths_stepsCREATE_REPORT_FILES->raise();
        metapaths_stepsANNOTATE->raise();
        metapaths_stepsGFF_TO_AMINO->raise();
        metapaths_stepsPREPROCESS_FASTA->raise();
        metapaths_stepsSTATS_RRNA->raise();
        metapaths_stepsMLTREEMAP_IMAGEMAKER->raise();
        QWidget::setTabOrder(preprocess_fastaYES, preprocess_fastaSKIP);
        QWidget::setTabOrder(preprocess_fastaSKIP, preprocess_fastaREDO);
        QWidget::setTabOrder(preprocess_fastaREDO, orf_predictionYES);
        QWidget::setTabOrder(orf_predictionYES, orf_predictionSKIP);
        QWidget::setTabOrder(orf_predictionSKIP, orf_predictionREDO);
        QWidget::setTabOrder(orf_predictionREDO, gff_to_aminoYES);
        QWidget::setTabOrder(gff_to_aminoYES, gff_to_aminoSKIP);
        QWidget::setTabOrder(gff_to_aminoSKIP, gff_to_aminoREDO);
        QWidget::setTabOrder(gff_to_aminoREDO, filtered_fastaYES);
        QWidget::setTabOrder(filtered_fastaYES, filtered_fastaSKIP);
        QWidget::setTabOrder(filtered_fastaSKIP, filtered_fastaREDO);
        QWidget::setTabOrder(filtered_fastaREDO, compute_refscoreYES);
        QWidget::setTabOrder(compute_refscoreYES, compute_refscoreSKIP);
        QWidget::setTabOrder(compute_refscoreSKIP, compute_refscoreREDO);
        QWidget::setTabOrder(compute_refscoreREDO, blast_refdbYES);
        QWidget::setTabOrder(blast_refdbYES, blast_refdbSKIP);
        QWidget::setTabOrder(blast_refdbSKIP, blast_refdbREDO);
        QWidget::setTabOrder(blast_refdbREDO, parse_blastYES);
        QWidget::setTabOrder(parse_blastYES, parse_blastSKIP);
        QWidget::setTabOrder(parse_blastSKIP, parse_blastREDO);
        QWidget::setTabOrder(parse_blastREDO, scan_rrnaYES);
        QWidget::setTabOrder(scan_rrnaYES, scan_rrnaSKIP);
        QWidget::setTabOrder(scan_rrnaSKIP, scan_rrnaREDO);
        QWidget::setTabOrder(scan_rrnaREDO, scan_trnaYES);
        QWidget::setTabOrder(scan_trnaYES, scan_trnaSKIP);
        QWidget::setTabOrder(scan_trnaSKIP, scan_trnaREDO);
        QWidget::setTabOrder(scan_trnaREDO, stats_rrnaYES);
        QWidget::setTabOrder(stats_rrnaYES, stats_rrnaSKIP);
        QWidget::setTabOrder(stats_rrnaSKIP, stats_rrnaREDO);
        QWidget::setTabOrder(stats_rrnaREDO, annotateYES);
        QWidget::setTabOrder(annotateYES, annotateSKIP);
        QWidget::setTabOrder(annotateSKIP, annotateREDO);
        QWidget::setTabOrder(annotateREDO, pathologic_inputYES);
        QWidget::setTabOrder(pathologic_inputYES, pathologic_inputSKIP);
        QWidget::setTabOrder(pathologic_inputSKIP, pathologic_inputREDO);
        QWidget::setTabOrder(pathologic_inputREDO, genbank_fileYES);
        QWidget::setTabOrder(genbank_fileYES, genbank_fileSKIP);
        QWidget::setTabOrder(genbank_fileSKIP, genbank_fileREDO);
        QWidget::setTabOrder(genbank_fileREDO, create_report_filesYES);
        QWidget::setTabOrder(create_report_filesYES, create_report_filesSKIP);
        QWidget::setTabOrder(create_report_filesSKIP, create_report_filesREDO);
        QWidget::setTabOrder(create_report_filesREDO, mltreemap_calculationYES);
        QWidget::setTabOrder(mltreemap_calculationYES, mltreemap_calculationSKIP);
        QWidget::setTabOrder(mltreemap_calculationSKIP, mltreemap_calculationREDO);
        QWidget::setTabOrder(mltreemap_calculationREDO, mltreemap_imagemakerYES);
        QWidget::setTabOrder(mltreemap_imagemakerYES, mltreemap_imagemakerSKIP);
        QWidget::setTabOrder(mltreemap_imagemakerSKIP, mltreemap_imagemakerREDO);
        QWidget::setTabOrder(mltreemap_imagemakerREDO, pathologicYES);
        QWidget::setTabOrder(pathologicYES, pathologicSKIP);
        QWidget::setTabOrder(pathologicSKIP, pathologicREDO);
        QWidget::setTabOrder(pathologicREDO, tableWidget);

        retranslateUi(ResultPage);

        QMetaObject::connectSlotsByName(ResultPage);
    } // setupUi

    void retranslateUi(QWidget *ResultPage)
    {
        ResultPage->setWindowTitle(QApplication::translate("ResultPage", "Form", 0, QApplication::UnicodeUTF8));
        title->setText(QApplication::translate("ResultPage", "Pipeline Execution Summary", 0, QApplication::UnicodeUTF8));
        metapaths_stepsGFF_TO_AMINO->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        gff_to_aminoYES->setText(QString());
        gff_to_aminoSKIP->setText(QString());
        gff_to_aminoREDO->setText(QString());
        metapaths_stepsMLTREEMAP_CALCULATION->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        mltreemap_calculationYES->setText(QString());
        mltreemap_calculationSKIP->setText(QString());
        mltreemap_calculationREDO->setText(QString());
        QTableWidgetItem *___qtablewidgetitem = tableWidget->horizontalHeaderItem(0);
        ___qtablewidgetitem->setText(QApplication::translate("ResultPage", "run", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem1 = tableWidget->horizontalHeaderItem(1);
        ___qtablewidgetitem1->setText(QApplication::translate("ResultPage", "skip", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem2 = tableWidget->horizontalHeaderItem(2);
        ___qtablewidgetitem2->setText(QApplication::translate("ResultPage", "redo", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem3 = tableWidget->horizontalHeaderItem(3);
        ___qtablewidgetitem3->setText(QApplication::translate("ResultPage", "status", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem4 = tableWidget->verticalHeaderItem(0);
        ___qtablewidgetitem4->setText(QApplication::translate("ResultPage", "Preprocess FASTA", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem5 = tableWidget->verticalHeaderItem(1);
        ___qtablewidgetitem5->setText(QApplication::translate("ResultPage", "ORF Prediction", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem6 = tableWidget->verticalHeaderItem(2);
        ___qtablewidgetitem6->setText(QApplication::translate("ResultPage", "GFF to Amino", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem7 = tableWidget->verticalHeaderItem(3);
        ___qtablewidgetitem7->setText(QApplication::translate("ResultPage", "Filtered FASTA", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem8 = tableWidget->verticalHeaderItem(4);
        ___qtablewidgetitem8->setText(QApplication::translate("ResultPage", "Compute Refscore", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem9 = tableWidget->verticalHeaderItem(5);
        ___qtablewidgetitem9->setText(QApplication::translate("ResultPage", "BLAST refDB", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem10 = tableWidget->verticalHeaderItem(6);
        ___qtablewidgetitem10->setText(QApplication::translate("ResultPage", "Parse BLAST", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem11 = tableWidget->verticalHeaderItem(7);
        ___qtablewidgetitem11->setText(QApplication::translate("ResultPage", "Scan rRNA", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem12 = tableWidget->verticalHeaderItem(8);
        ___qtablewidgetitem12->setText(QApplication::translate("ResultPage", "Scan tRNA", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem13 = tableWidget->verticalHeaderItem(9);
        ___qtablewidgetitem13->setText(QApplication::translate("ResultPage", "rRNA Statistics", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem14 = tableWidget->verticalHeaderItem(10);
        ___qtablewidgetitem14->setText(QApplication::translate("ResultPage", "Annotate", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem15 = tableWidget->verticalHeaderItem(11);
        ___qtablewidgetitem15->setText(QApplication::translate("ResultPage", "Pathologic Input", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem16 = tableWidget->verticalHeaderItem(12);
        ___qtablewidgetitem16->setText(QApplication::translate("ResultPage", "Genbank File", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem17 = tableWidget->verticalHeaderItem(13);
        ___qtablewidgetitem17->setText(QApplication::translate("ResultPage", "Create Report Files", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem18 = tableWidget->verticalHeaderItem(14);
        ___qtablewidgetitem18->setText(QApplication::translate("ResultPage", "ML-TreeMap Calculation", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem19 = tableWidget->verticalHeaderItem(15);
        ___qtablewidgetitem19->setText(QApplication::translate("ResultPage", "ML-TreeMap Imagemaker", 0, QApplication::UnicodeUTF8));
        QTableWidgetItem *___qtablewidgetitem20 = tableWidget->verticalHeaderItem(16);
        ___qtablewidgetitem20->setText(QApplication::translate("ResultPage", "Pathologic", 0, QApplication::UnicodeUTF8));
        metapaths_stepsPATHOLOGIC->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        pathologicYES->setText(QString());
        pathologicSKIP->setText(QString());
        pathologicREDO->setText(QString());
        metapaths_stepsSCAN_RRNA->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        scan_rrnaYES->setText(QString());
        scan_rrnaSKIP->setText(QString());
        scan_rrnaREDO->setText(QString());
        metapaths_stepsCREATE_REPORT_FILES->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        create_report_filesYES->setText(QString());
        create_report_filesSKIP->setText(QString());
        create_report_filesREDO->setText(QString());
        metapaths_stepsGENBANK_FILE->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        genbank_fileYES->setText(QString());
        genbank_fileSKIP->setText(QString());
        genbank_fileREDO->setText(QString());
        metapaths_stepsSCAN_TRNA->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        scan_trnaYES->setText(QString());
        scan_trnaSKIP->setText(QString());
        scan_trnaREDO->setText(QString());
        metapaths_stepsCOMPUTE_REFSCORE->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        compute_refscoreYES->setText(QString());
        compute_refscoreSKIP->setText(QString());
        compute_refscoreREDO->setText(QString());
        metapaths_stepsFILTERED_FASTA->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        filtered_fastaYES->setText(QString());
        filtered_fastaSKIP->setText(QString());
        filtered_fastaREDO->setText(QString());
        metapaths_stepsSTATS_RRNA->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        stats_rrnaYES->setText(QString());
        stats_rrnaSKIP->setText(QString());
        stats_rrnaREDO->setText(QString());
        metapaths_stepsPARSE_BLAST->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        parse_blastYES->setText(QString());
        parse_blastSKIP->setText(QString());
        parse_blastREDO->setText(QString());
        metapaths_stepsPATHOLOGIC_INPUT->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        pathologic_inputYES->setText(QString());
        pathologic_inputSKIP->setText(QString());
        pathologic_inputREDO->setText(QString());
        metapaths_stepsBLAST_REFDB->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        blast_refdbYES->setText(QString());
        blast_refdbSKIP->setText(QString());
        blast_refdbREDO->setText(QString());
        metapaths_stepsANNOTATE->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        annotateYES->setText(QString());
        annotateSKIP->setText(QString());
        annotateREDO->setText(QString());
        metapaths_stepsPREPROCESS_FASTA->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        preprocess_fastaYES->setText(QString());
        preprocess_fastaSKIP->setText(QString());
        preprocess_fastaREDO->setText(QString());
        metapaths_stepsORF_PREDICTION->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        orf_predictionYES->setText(QString());
        orf_predictionSKIP->setText(QString());
        orf_predictionREDO->setText(QString());
        metapaths_stepsMLTREEMAP_IMAGEMAKER->setTitle(QApplication::translate("ResultPage", "GroupBox", 0, QApplication::UnicodeUTF8));
        mltreemap_imagemakerYES->setText(QString());
        mltreemap_imagemakerSKIP->setText(QString());
        mltreemap_imagemakerREDO->setText(QString());
    } // retranslateUi

};

namespace Ui {
    class ResultPage: public Ui_ResultPage {};
} // namespace Ui

QT_END_NAMESPACE

#endif // UI_RESULTPAGE_H
